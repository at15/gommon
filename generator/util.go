package generator

import (
	"path/filepath"

	"github.com/dyweb/gommon/util/fsutil"
)

// DefaultHeader is the standard go header for generated files with a trailing \n
func DefaultHeader(templateSrc string) string {
	return "// Code generated by " + Name + " from " + templateSrc + " DO NOT EDIT.\n"
}

// Header allows you to specify generator name
func Header(generator, templateSrc string) string {
	return "// Code generated by " + generator + " from " + templateSrc + " DO NOT EDIT.\n"
}

func DefaultIgnores() *fsutil.Ignores {
	return fsutil.NewIgnores(
		[]fsutil.IgnorePattern{
			fsutil.ExactPattern(".git"),
			fsutil.ExactPattern("testdata"),
			fsutil.ExactPattern("vendor"),
			fsutil.ExactPattern(".idea"),
			fsutil.ExactPattern(".vscode"),
		},
		nil,
	)
}

// WriteFile writes file using permission 0664
// NOTE: 0664 is octal literal in Go, the code would compile for 664, but the result file mode is incorrect
// learned this the hard way https://github.com/dyweb/gommon/issues/41
// stat -c %a pkg.go
// NOTE: this code is now in
//func WriteFile(f string, b []byte) error {
//	if err := ioutil.WriteFile(f, b, 0664); err != nil {
//		return errors.WithStack(err)
//	}
//	return nil
//}

//func writeGoFile(pkg string, imports []Import, body []byte, src, dst string) error {
//	var buf bytes.Buffer
//	buf.WriteString(DefaultHeader(src))
//	if pkg != "" {
//		buf.WriteString("package " + pkg)
//	}
//	for _, impt := range imports {
//		if impt.Alias != "" {
//			fmt.Fprintf(&buf, "import %s \"%s\"", impt.Alias, impt.Pkg)
//		} else {
//			fmt.Fprintf(&buf, "import \"%s\"", impt.Pkg)
//		}
//	}
//	buf.Write(body)
//	formatted, err := format.Source(buf.Bytes())
//	if err != nil {
//		return errors.Wrap(err, "error format go code")
//	}
//	return fsutil.WriteFile(dst, formatted)
//}

func join(s ...string) string {
	return filepath.Join(s...)
}
