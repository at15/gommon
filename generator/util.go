package generator

import (
	"io/ioutil"

	"github.com/pkg/errors"
	"path/filepath"
)

var defaultIgnores Ignores = []string{"testdata", "vendor", ".idea", ".vscode"}

type Ignores []string

func DefaultIgnores() Ignores {
	return defaultIgnores
}

func (is *Ignores) isIgnored(s string) bool {
	for _, i := range *is {
		if i == s {
			return true
		}
	}
	return false
}

// dfs to find all gommon files
// TODO: limit level
// TODO: bfs using recursion?
func Walk(root string, ignore Ignores) []string {
	files, err := ioutil.ReadDir(root)
	if err != nil {
		log.Warn(err)
	}
	var gommonFiles []string
	for _, file := range files {
		name := file.Name()
		//log.Info(join(root, name))
		if file.IsDir() && !ignore.isIgnored(name) {
			gommonFiles = append(gommonFiles, Walk(join(root, name), ignore)...)
			continue
		}
		if name == "gommon.yml" {
			gommonFiles = append(gommonFiles, join(root, name))
		}
	}
	return gommonFiles
}

// stat -c %a pkg.go
func WriteFile(f string, b []byte) error {
	// NOTE: 0664 is octal literal, the code would compile for 664, but the result file mode is incorrect
	// learned this the hard way https://github.com/dyweb/gommon/issues/41
	if err := ioutil.WriteFile(f, b, 0664); err != nil {
		return errors.WithStack(err)
	}
	return nil
}

func join(s ...string) string {
	return filepath.Join(s...)
}

func Header(generator string, template string) string {
	return "// Code generated by " + generator + " from " + template + " DO NOT EDIT.\n"
}
